<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[solidity03]]></title>
    <url>%2F2019%2F03%2F06%2F1.html</url>
    <content type="text"><![CDATA[solidity学习讲解(3)-数据类型时间与日期Solidity支持使用字符标识时间单位，seconds,minutes,hours,days都可以作为后缀如： 1 == 1 seconds 1 minutes == 60 seconds 1 hours == 60 minutes 1 days == 24 hours 1 weeks == 7 days 通过now，可以获取当前区块的时间戳 12345function f(uint start, uint daysAfter) public &#123; if (now &gt;= start + daysAfter * 1 days) &#123; // ... &#125;&#125; 一般时间的话，不要用等于用&gt; &lt;,因为不是每年都是365。 mapping Mapping声明为 mapping(_KeyType =&gt; _ValueType)，Key支持所有简单类型和string（不支持mapping,动态字节数组，结构体，枚举。。。），Value支持所有类型，包括mapping Mapping可视为一个hashtable 获取不存在的键值，当类型是int/uint时，取得0，当类型是string时，取得空string Mapping仅能声明为storage变量 Mapping不能遍历，但可以通过与数组结合实现遍历 1234567891011121314151617mapping(string =&gt; uint) public balances; //定义一个映射‘public’访问修饰符//public关键字会自动创建一个getter方法（不会生成setter方法）function balances(string _account) returns (uint value)&#123; return balances[account];&#125;balances[song] = 1; //设置song的值为1balances[deng] = 0; //如果没有设置key都返回0//public关键字使得另外一个合约可以通过以下方式访问mappingcontractName.balances(&quot;song&quot;);//嵌套mappingmapping(address =&gt; mapping(string =&gt; uint)) public datas;//delete 不会删除元素，只会把元素设置成默认类型的初始值deletebalances[&quot;song&quot;];delete balances; //把所有的设为初始值 mapping 的迭代一般是跟一个数组实现，数据记录key,然后循环遍历数组，从mapping取出数据组装，当然你也可以自行实现一个数据结构https://github.com/ethereum/dapp-bin/tree/master/library 如图所示： 结构体和枚举结构体 结构体只能在内部函数调用时使用，无法在外部函数调用时使用 结构体无法保存到storage变量中 12345678910pragma solidity ^0.4.0;contract Ballot &#123; struct Voter &#123; // Struct uint weight; bool voted; address delegate; uint vote; &#125;&#125; 12345678910111213141516171819//定义一个结构体struct Bank &#123; address owner; uint balance ;&#125;//初始化结构体//方法一：按结构体中的命名参数进行初始化Bank b = Bank(&#123; owner:msg.sender, balance:5 &#125;)//方法二： 按结构体中的定义顺序初始化Bank c = Bank(msg.sender,5);c.balance = 15; //重新赋值//重置为初始值，把struct里面所有的变量设置为0，除了mapping类型delete b; 枚举 枚举是solidity中自定义的类型。一般作为状态机使用 123456789enum State &#123; Crated, locked, Inactive&#125;;State public state; //申明枚举类型state = State.Created;//枚举类型可以显示转化为整形uint CreatedState =uint(State.Created);]]></content>
      <categories>
        <category>solidity学习</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[solidity01]]></title>
    <url>%2F2019%2F03%2F06%2Fsolidity01.html</url>
    <content type="text"><![CDATA[solidity学习讲解(1)solidity是什么？ Solidity是运行在EVM上，面向合约的高级编程语言，它的语法受C++、Python和JavaScript的影响 Solidity使用静态类型，支持继承、库和用户自定义类型等特性 智能合约是在区块链上达成协议的一种方式，智能合约并没有超越传统合约的功能，但它能最小化达成协议所需的信任。 智能合约不仅是一个可以自动执行的程序，它自己就是一个区块链参与者。它对接收到的交易进行回应，它可以接收和储存价值，也可以向外发送信息和价值。 参考链接：http://solidity.readthedocs.io/en/v0.4.24/ solidity开发环境Remix编辑器 ​ Solidity的在线编辑器 ​ 支持语法高亮、代码补全和代码管理等功能 ​ 支持编译Solidity代码 ​ https://remix.ethereum.org/ 当然也可以用如下方式： EVM变量类型Solidity的变量，根据其声明位置、修饰符的不同，分三种类型 calldata：calldata保存在栈中，保存public函数的参数，该类数据无需手工声明，由solidity自动分配，由于EVM最多访问深度为16的栈元素，因此calldata最多支持16个变量 memory：memory变量位于EVM的memory区，存放函数的临时局部数据，函数执行完后即销毁，函数内临时变量和私有函数的参数均为memory变量 storage：storage变量保存在State存储中，声明在合约内、函数外的变量均为storage变量 变量寻址 calldata变量存储于栈中，EVM的运算指令直接从栈中取数计算 memory变量存储于内存，通过EVM的MLOAD、MSTORE指令操作 存储变量保存在State存储中 存储器变量在State中按Key-Value存储，存储规则如下： 变量Hash Key：按合约hash+变量序号计算hash 数组Hash Key：变量Hash Key对应的Value，存储数组大小，变量Hash Key+下标值的Hash Key对应的Value，存储元素值 Mapping Hash Key：变量Hash Key+Mapping Key Hash的Hash Key对应的Value，存储元素值]]></content>
      <categories>
        <category>solidity学习</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[solidity02]]></title>
    <url>%2F2019%2F03%2F06%2Fsolidity02.html</url>
    <content type="text"><![CDATA[solidity学习讲解(2)-数据类型注释1.单行注释单行注释用//符号，例如： 1//这是单行注释 2.多行注释123/*多行注释*/ 整形和布尔型int/uint：solidity的基本数字类型，长度为256bit 详细介绍：空间大小从8位开始并且以8位步长递增，最大256位例如：int8、int16、uint8、uint16、uint256等。 值得注意的是：int/uint默认表示uint256/int256,uint一般来表示货币数量（solidity中没有double和float）像5/2等于2，没有小数的。 还有一点整形常量一旦被初始化就不可以被修改 1int constant a = 1; bool：bool类似C/C++中的bool，长度为256bit 123bool b = true;//或者类型推断var b =true; 地址以太坊的地址为160位，160/8=20字节，可以用uint160表示。 1address public sender; Address存储外部账户地址和合约账户地址Address类型包含下列方法： balance()：获取当前账户的余额 send()：执行转账，失败返回false transfer()：执行转账，失败throw call()：以外部函数调用的形式调用某个address的函数 callcode()：以内部函数调用的形式调用某个address的函数 delegatecall()：以内部函数调用的形式调用某个address的函数，设置msg.sender和msg.value 字节数组固定长度的字节数组是以bytes加上数字后缀的方式定义的，如bytes2表示两个字节长度的字节数组数字后缀长度从1到32，以步长1递增。bytes缺省为bytes1。定长数据类型有通用的length()方法，获取数据长度 12byte a;//==bytes1bytes2 b; 动态长度的字节数组：1.bytes:动态长度字节数组； 2，string:动态长度字符串。 bytes是一种特殊的数组。bytes类似byte[],在外部函数作为参数时，会进行压缩打包以便节省空间，所以尽量使用bytes; 1bytes m; string类似bytes,目前不提供长度和按索引的访问方式。 1string name = &quot;sss&quot;;//string 存储是以UTF-8的形式，所以是双引号。 不能 name.length和name[0] 数组和多维数组数组同样分为定长数组和动态数组。固定长度的数组在申明之后长度不可以改变，动态数组不需要指定长度且在后续使用的过程是可以动态添加数组。 使用方法： 1234uint[3] a; //静态数组uint[3] a = [1,2,3]; //静态数组初始化a[0] = 4; //修改数组元素var a_length = a.length; //数组长度 动态数组的使用方法 123456bytes32[] name ; //动态数组默认长度为0bytes32[] name = new bytes32[](5); //初始化一个长度为5的动态数组uint length = names.push(&quot;IronStrong&quot;); //添加元素，返回新数组的长度names[0] = bytes32(&quot;xiaoqiang&quot;); //修改数组中的元素names.length; //获取数组的长度names.length = 1; //设置数组的长度（只能用于storage中的动态数组） 多维数组 在solidity中多维数组的行列位置和大多数的编程语言是相反的 12345678910111213//静态的多维数组uint[3][5] a ; //5行3列a[0][0] = 1;//动态多维数组举例//拥有动态数组所有特性uint[][5] b; //5行，列为动态y[0].push(uint(1)); //添加元素y[0].push(uint(2));y[0].length = 10; //设置长度uint[3][] b ; //列长为3，行可变z.push([1,2,3]); //添加数组，返回行的长度z.length = 10; //设置行长度 具体使用介绍： 声明在函数内的memory类型定长数组，需要使用new来申请memory空间 123456789pragma solidity ^0.4.16;contract C &#123; function f(uint len) public pure &#123; uint[] memory a = new uint[](7); bytes memory b = new bytes(len); a[6] = 8; &#125;&#125; 声明为函数参数的定长数组 12345678910pragma solidity ^0.4.16;contract C &#123; function f() public pure &#123; g([uint(1), 2, 3]); &#125; function g(uint[3] _data) public pure &#123; // ... &#125;&#125; 数组特性 定长数组和变长数组无法互相转换 memory类型的定长数组，一旦声明，无法改变长度 函数内部不支持二维数组 声明为storage的数组，有两个额外的成员函数： 1.length：获取当前数组长度2.push：往数组尾部追加数据 如果函数的返回值被声明为变长数组，如bytes或string，这个函数返回的变长数组无法在Solidity内部获取，只能由外部获取（web3js、web3sdk等）]]></content>
      <categories>
        <category>solidity学习</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Title]]></title>
    <url>%2F2019%2F03%2F06%2Ftitle.html</url>
    <content type="text"><![CDATA[搭建博客安装这个快速搭建一个博客 1sudo npm install hexo-cli -g 1234hexo init blogcd blognpm installhexo server]]></content>
      <categories>
        <category>category</category>
      </categories>
      <tags>
        <tag>tag1</tag>
        <tag>tag2</tag>
        <tag>...</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java数据结构]]></title>
    <url>%2F2018%2F12%2F07%2Fjava%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</url>
    <content type="text"><![CDATA[java数据结构1.什么是数据结构​ 简单地说，数据结构是以某种特定的布局方式存储数据的容器。这种“布局方式”决定了数据结构对于某些操作是高效的，而对于其他操作则是低效的。首先我们需要理解各种数据结构，才能在处理实际问题时选取最合适的数据结构。 2.为什么我们需要数据结构​ 数据是计算机科学当中最关键的实体，而数据结构则可以将数据以某种组织形式存储，因此，数据结构的价值不言而喻。 ​ 无论你以何种方式解决何种问题，你都需要处理数据——无论是涉及员工薪水、股票价格、购物清单，还是只是简单的电话簿问题。 ​ 数据需要根据不同的场景，按照特定的格式进行存储。有很多数据结构能够满足以不同格式存储数据的需求。]]></content>
      <tags>
        <tag>about</tag>
      </tags>
  </entry>
</search>
